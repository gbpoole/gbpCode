#----------------------------------------------------------------------
#
# This file sets the library information needed in CCFLAGS and LDFLAGS
# for the gbpCode Makefile
#
# YOU REALLY SHOULDN'T NEED TO EDIT THIS FILE!
#
#----------------------------------------------------------------------

# Set default debugger support
ifndef USE_DEBUGGER
  USE_DEBUGGER=0
endif
export USE_DEBUGGER

# Add cfitsio
ifndef USE_CFITSIO
  USE_CFITSIO    =0
endif
ifneq ($(USE_CFITSIO),0)
  CCFLAGS := $(CCFLAGS) -I$(GBP_CFITSIO_DIR)/include/
  LDFLAGS := $(LDFLAGS) -L$(GBP_CFITSIO_DIR)/lib/
  LIBS    := $(LIBS) -lcfitsio
endif
#CCFLAGS := $(CCFLAGS) -DUSE_CFITSIO='$(USE_CFITSIO)'
export USE_CFITSIO

# Add hdf5
ifndef USE_HDF5
  USE_HDF5    =0
endif
ifneq ($(USE_HDF5),0)
  CCFLAGS := $(CCFLAGS) -I$(GBP_HDF5_DIR)/include/
  LDFLAGS := $(LDFLAGS) -L$(GBP_HDF5_DIR)/lib/
  LIBS    := $(LIBS) -lhdf5
endif
#CCFLAGS := $(CCFLAGS) -DUSE_HDF5='$(USE_HDF5)'
export USE_HDF5

# Add gdlib
ifndef USE_GDLIB
  USE_GDLIB    =1
  GBP_GDLIB_DIR=/usr/lib/
endif
ifneq ($(USE_GDLIB),0)
  CCFLAGS := $(CCFLAGS) -I$(GBP_GSL_DIR)/include/
  LDFLAGS := $(LDFLAGS) -L$(GBP_GSL_DIR)/lib/
  LIBS    := $(LIBS) -lgd
endif
#CCFLAGS := $(CCFLAGS) -DUSE_GDLIB='$(USE_GDLIB)'
export USE_GDLIB

# Add Cuda
ifndef USE_CUDA
  USE_CUDA    =0
endif
#CCFLAGS := $(CCFLAGS) -DUSE_CUDA='$(USE_CUDA)'
export USE_CUDA

# Add debugger support
ifndef USE_DEBUGGER
  USE_DEBUGGER    =0
endif
#CCFLAGS := $(CCFLAGS) -DUSE_DEBUGGER='$(USE_DEBUGGER)'
export USE_DEBUGGER

# Add valgrind
ifndef USE_VALGRIND
  USE_VALGRIND    =0
  GBP_VALGRIND_DIR=/usr/lib/
endif
ifneq ($(USE_VALGRIND),0)
  CCFLAGS := $(CCFLAGS) -I$(GBP_VALGRIND_DIR)/include/
  LDFLAGS := $(LDFLAGS) -L$(GBP_VALGRIND_DIR)/lib/
  LIBS    := $(LIBS) 
endif
#CCFLAGS := $(CCFLAGS) -DUSE_VALGRIND='$(USE_VALGRIND)'
export USE_VALGRIND

# Add GSL stuff (default off)
ifndef USE_GSL
  USE_GSL=0
endif
ifneq ($(USE_GSL),0)
  CCFLAGS := $(CCFLAGS) -I$(GBP_GSL_DIR)/include/
  LDFLAGS := $(LDFLAGS) -L$(GBP_GSL_DIR)/lib/ 
  LIBS    := $(LIBS) -lm -lgsl -lgslcblas
endif
#CCFLAGS := $(CCFLAGS) -DUSE_GSL='$(USE_GSL)'
export USE_GSL

# Add FFTW (fast Fourier transform) stuff (default off)
ifndef USE_FFTW
  USE_FFTW=0
endif
ifneq ($(USE_FFTW),0)
  ifneq ($(USE_MPI),0)
    CCFLAGS := $(CCFLAGS) -I$(GBP_FFTW_DIR)/include
    LDFLAGS := $(LDFLAGS) -L$(GBP_FFTW_DIR)/lib
    ifeq ($(USE_DOUBLE),0)
      LIBS  := $(LIBS) -lsrfftw_mpi -lsfftw_mpi -lsrfftw -lsfftw
    else
      LIBS  := $(LIBS) -ldrfftw_mpi -ldfftw_mpi -ldrfftw -ldfftw
    endif
  else
    CCFLAGS := $(CCFLAGS) -I$(GBP_FFTW_DIR)/include
    LDFLAGS := $(LDFLAGS) -L$(GBP_FFTW_DIR)/lib
    ifeq ($(USE_DOUBLE),0)
      LIBS  := $(LIBS) -lsrfftw -lsfftw
    else
      LIBS  := $(LIBS) -ldrfftw -ldfftw
    endif
  endif
endif
#CCFLAGS := $(CCFLAGS) -DUSE_FFTW='$(USE_FFTW)'
export USE_FFTW

# SPRNG (parallel random number generator) stuff (default off)
ifndef USE_SPRNG
  USE_SPRNG=0
endif
ifneq ($(USE_SPRNG),0)
  CCFLAGS := $(CCFLAGS) -I$(GBP_SPRNG_DIR)/include
  LDFLAGS := $(LDFLAGS) -L$(GBP_SPRNG_DIR)/lib
  LIBS    := $(LIBS) -llcg
  CCFLAGS := $(CCFLAGS) 
endif
#CCFLAGS := $(CCFLAGS) -DUSE_SPRNG='$(USE_SPRNG)'
export USE_SPRNG

# Set default MPI support
ifndef USE_MPI
  USE_MPI=0
endif
#CCFLAGS  := $(CCFLAGS) -DUSE_MPI='$(USE_MPI)'
export USE_MPI

# Set default MPI-IO support
ifndef USE_MPI_IO
  USE_MPI_IO=0
endif
#CCFLAGS  := $(CCFLAGS) -DUSE_MPI_IO='$(USE_MPI_IO)'
export USE_MPI_IO

